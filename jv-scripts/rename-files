#!/usr/bin/env python

from os import path, walk, rename
from collections import defaultdict
import argparse
import re
import logging

logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.INFO)

# Setting domove to False does not really work.  See comment in file_exists.
domove = False
new_is_low = True
verbose = False

mypath = "."
start_index = 1
separator = "~"
keyjoiner = "|"

moved_away = []
created_new = []

class FileInfo:
    def __init__(self, prefix, extension, root, fname):
        self.prefix = prefix
        self.extension = extension
        self.root = root
        self.fname = fname
        self.path = path.join(root, fname)
        try:
            self.mtime = path.getmtime(self.path)
        except Exception as e:
            # TODO: this can happen if fpath is a dead symbolic link
            # There's probably a way to check that beforehand.
            # Use os.stat instead of getmtime
            self.mtime = 0

    def append_dir(self, fname):
        return path.join(self.root, fname)

    def make_versioned_file(self, fmt, offset):
        if (offset == 0) and (start_index < 2):
            return self.prefix + self.extension
        else:
            version = offset + start_index
            return self.prefix + separator + format(version, fmt) + self.extension

def parse_arguments():
    global start_index
    global mypath
    global domove
    parser = argparse.ArgumentParser(description="Rename files in a directory")
    parser.add_argument("--start-index", type=int, default=1,
                        help="the index to start at for duplicate filenames")
    parser.add_argument("--dir", default=None,
                        help="a directory within the repository you want to use")
    parser.add_argument("--n", action="store_true", default=False,
                        help="do not move files, just print what we would do")
    args = parser.parse_args()
    start_index = args.start_index
    if args.dir:
        mypath = args.dir
        domove = not args.n
    else:
        domove = False
    return args

def padding_string(count):
    # This could be less hard-coded/pedantic, and we might even want to handle four digits
    if count < (10 - start_index):
        return '01'
    elif count < (100 - start_index):
        return '02'
    else:
        return '03'

def file_exists(pathname):
    global moved_away, created_new
    if pathname in moved_away:
        return False
    if pathname in created_new:
        return True
    return path.exists(pathname)

def get_nonexistent_file(prefix, extension, dests):
    index = 3
    name = prefix + separator + str(index) + extension
    while file_exists(name) or name in dests:
        index += 1
        name = prefix + separator + str(index) + extension
    return name

def timestamp_of(file_info):
    return file_info.mtime

def filename_to_key(fname):
    index_re = '[-~][0-9~]+$'
    junk_re = '[-~ .]+$'

    basename, extension = path.splitext(fname)
    prefix = re.sub(index_re, '', basename)
    prefix = re.sub(junk_re, '', prefix)
    key = prefix + keyjoiner + extension
    return key.lower(), prefix, extension

def map_by_basic_name(rootdir):
    filemap = defaultdict(list)
    for root, subfolders, subfiles in walk(rootdir):
        for fname in subfiles:
            key, prefix, extension = filename_to_key(fname)
            filemap[key].append(FileInfo(prefix, extension, root, fname))
    return filemap

def build_file_moves(filemap):
    fmoves = []

    for key in filemap:
        index = 0
        filemap[key].sort(key=timestamp_of, reverse=new_is_low)
        fmt = padding_string(len(filemap[key]))
        for fileinfo in filemap[key]:
            destfile = fileinfo.make_versioned_file(fmt, index)
            dest = fileinfo.append_dir(destfile)

            src = fileinfo.path
            if dest.lower() != src.lower():
                fmoves.append([src, dest])
            elif verbose:
                logging.info('  - {0} stays as is'.format(src))
            index += 1
    return fmoves

def move_file(src, dst):
    global moved_away, created_new
    if domove:
        logging.info("moving {0} to {1}".format(src, dst))
        rename(src, dst)
    else:
        moved_away.append(src)
        created_new.append(dst)
        logging.info("mv {0}\n      to {1}".format(src, dst))

def do_easy_moves(allmoves):
    nmoves = len(allmoves)
    hardmoves = []
    for move in allmoves:
        src = move[0]
        dest = move[1]
        if dest.lower() == src.lower():
            logging.info("easy move: {0} already in place".format(dest))
        elif file_exists(dest):
            logging.info('postponing: {0} -> {1}'.format(src, dest))
            hardmoves.append(move)
        else:
            move_file(src, dest)

    if verbose:
        logging.info('{0} out of {1} moves are trickier'.format(len(allmoves), nmoves))
    return hardmoves

def do_hard_moves_1(hardmoves):
    next_round = []

    dests = [x[1] for x in hardmoves]
    for move in hardmoves:
        src = move[0]
        dest = move[1]
        if dest.lower() == src.lower():
            logging.info("hard move: {0} already in place".format(dest))
        elif file_exists(dest):
            logging.info("can't move: {} -> {}".format(src, dest))
            key, prefix, extension = filename_to_key(dest)
            temp = get_nonexistent_file(prefix, extension, dests)
            move_file(src, temp)
            logging.debug("moved {} to {}".format(src, temp))
            logging.debug("later will move {} to {}".format(temp, dest))
            next_round.append([temp, dest])
        else:
            logging.debug("hard move: {} -> {} became easy".format(src, dest))
            move_file(src, dest)
    return next_round

def do_hard_moves(hardmoves):
    to_do = hardmoves
    while to_do:
        to_do = do_hard_moves_1(to_do)

def rename_files():
    args = parse_arguments()
    mymap = map_by_basic_name(mypath)
    moves = build_file_moves(mymap)
    hardmoves = do_easy_moves(moves)
    do_hard_moves(hardmoves)

rename_files()
